---
title: "02_Class_Activity"
author: "Bill Perry"
execute:
  freeze: auto
  cache: true
  echo: true
  keep-md: true # retains the images when you start again
format:
  html:
    freeze: false
    toc: false
    output-file: "02_02_class_activity.html"
    default: true
    embed-resources: true
    self-contained: true
    max-width: 80ch  # Limits line length to approximately 80 characters
    css: ../../css/activity.css
  docx:
    default: true
    toc: false
    toc-depth: 3
    number-sections: false
    highlight-style: github
    reference-doc: ../../ms_templates/custom-reference.docx
    css: msword.css
    embed-resources: true
---

# In class activity 2:

![](images/pine_needles.jpg){width="250"}

# What did we do last time?

-   How to start RStudio and set up a project

-   How to create a quarto markdown file

-   How to add code at the start to make it work better

-   How to load libraries `library(tidyverse)`

-   What the `<-` is and what it does

-   How to read in a file - csv and excel - `name_df <- read_csv("data/file.csv")`

-   How to graph data - can you read this out loud in English words

    ``` r
    ggplot(name_df, aes(x_variable, y_variable, color = categorical_variable)) +
    #      dataframe, aesthetics(x and y variables, mapping of color or fill or shape) + 
      geom_point() +
    # this it the geometry you want and can add more layers like
      geom_line()
    ```

-   What questions do you have and what is unclear - what did not work so far when you started the homework?

# Objectives and goals for today

::::: columns
::: {.column width="60%"}
-   Data wrangling and setting up a project
    -   variable names - directory names - object names
    -   can be anything you want - choose wisely young padawan
-   How can we save the data we modify and where to save it?
-   Why is it important to use the same names for variables?
    -   can reuse code
    -   clearer names and use
-   What is the `%>%` or the `|>` - the pipe will make you happy
-   Summarize data to a new dataframe
-   Improve graphs
    -   adding labels
    -   doing summary plots
    -   getting fancy
-   combining or splittig dataframes - the bind_rows(1,2)
-   Do we go wide to long and back again? We will see
:::

::: {.column width="40%"}
![](images/clipboard-2773654510.png)
:::
:::::

# Before we start - Planning the workflow

1.  What data do we have
    1.  what is the controlled vocabulary?
    2.  are there units?
2.  What is the directory structure?
3.  Do we have a metadata file?
4.  Is the data entered in a tidy format?
5.  What are we missing?

# Now lets create a new quarto file in the system I set up

::::: columns
::: {.column width="60%"}
-   note I usually use this sort of system in an r_projects directory
-   I have redone it for the class to organize all of the terms data
-   you should try making some of your own projects
:::

::: {.column width="40%"}
![](images/clipboard-972859733.png){width="241"}
:::
:::::

## In RStudio:

1.  click `file` - `open project` and select the `2025_UMD_BioStats_Student_Code.Rproj` file or double click on it in the finder or data explorer.
2.  your screen will now change as RStudio knows where home is

![](images/clipboard-2614364443.png)

3.  Note that in the upper right you will see `2025_UMD_BioStats_Student_Code` so you know you are in the right spot

4.  Now click File - New File - Quarto File

![](images/clipboard-3396400631.png)

5.  Create a file that starts with `02_` and then something that will help you know what is going on like `02_class_activity_in_class.qmd`

6.  Now this file thinks this is home.

7.  So I usually copy stuff for the header from another file as its just too hard to remember all this...

``` r
---
title: "Title of your file" # Title of the file
author: "Your Name" # who you are
format: # this is the formats that it will render to
  html:
    toc: false # not table of contents
    default: true
    embed-resources: true # makes everything go into the html file
    self-contained: true # also makes self contained
editor: visual # type of editing
project:
  execute-dir: project # where it will look for files
execute:
  keep-md: true # retains the images when you start again
  cache: true # also heps reatain images and code
---
```

# Now to load the libraries

```{r}
# install packages -----
# install.packages("readxl")
# install.packages("tidyverse")

# # we will install a few new libraries
# install.packages("skimr")

```

Each script you run from then on you will load the libraries from within the package.

```{r}
# Load the libraries ----
library(readxl) # allows to read in excel files
library(tidyverse) # provides utilities seen in console
library(skimr) # provide summary stats
library(here) # you dont need this one - just me in this html file
```

# Loading files

Now like we did before with x and y we will do this with a spreadsheet from a CSV file or excel file

We are going to work with the same data we did in the last class.

```{r}
#| message: false
#| warning: false
#| include: false
#| paged-print: false
p_df <- read_csv(here("data", "lecture_01", "pine_needles.csv"))

```

```{r}
#| eval: false
#| include: false
# load file -----
# this file is in the  data sub directory
# below put cursor between "" and click tab
# allows to to select the directory 
# tab again and select the file
p_df <- read_csv("data/lecture_01/pine_needles.csv") # reads in csv file
# dataframe stored by "<-" reading in csv file in quotes
```

# The Dataframe and variables

## The whole dataframe - wont show all

```{r}
p_df
```

## The top of the datafame to see what it looks like

```{r}
head(p_df)
# tail(p_df) # the bottom
```

## How to look at one variable

```{r}
p_df$group # name of dataframe $ varaible
```

# Plotting

## XY Plot with dodged points

```{r}
knitr::opts_chunk$set(
  comment = '', fig.width = 4, fig.height = 3)

ggplot(data = p_df, aes(x=wind, y=len_mm)) + 
  geom_point(position = position_dodge2(width=0.2) )
# this dodges the points # position_dodge2 or can use position_dodge depending on grouping
```

## Histogram Color with Bins

```{r}
knitr::opts_chunk$set(
  comment = '', fig.width = 4, fig.height = 3)

ggplot(data = p_df, aes(x=len_mm, fill = wind)) +
  geom_histogram( binwidth = 2, 
# sets the width in units of the bins - try different nubmers
   position = position_dodge2(width = 0.5))
```

## Box and Whisker Plots

```{r}
knitr::opts_chunk$set(
  comment = '', fig.width = 4, fig.height = 3)

ggplot(data = p_df, aes(x=wind, y=len_mm, fill = wind)) + geom_boxplot()
```

# How to save plots

```{r}
xy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm)) + 
  geom_point(position = position_dodge2(width=0.2) )
xy_plot
```

## xy_plot is not in the environment

we can save this plot by typing

```{r}
ggsave(xy_plot, # name of the plot you called it
       file = "figures/xy_plot.pdf", # type of file you want - pdf is good
       units = "in", # what are the units you want to measure in
       width = 6, height = 6) # dimensions - not if large the fonts need to be adjusted
```

The file should be in the figures directory

# Now lets make the graph prettier

```{r}

xy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm, color = wind, shape = wind)) + 
  geom_point(
    size = 2,
    position = position_dodge2(width=0.2)) +
  labs(x="Wind Side", y = "Length (mm)", color = "Wind Side", shape = "Wind Side")
xy_plot
```

## we can also add themes

```{r}
xy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm, color = wind, shape = wind)) + 
  geom_point(
    size = 2,
    position = position_dodge2(width=0.2)) +
  labs(x="Wind Side", y = "Length (mm)", color = "Wind Side", shape = "Wind Side") +
  theme_classic()
xy_plot
```

## change the scale by zooming in

```{r}
xy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm, color = wind, shape = wind)) + 
  geom_point(
    size = 2,
    position = position_dodge2(width=0.2)) +
  labs(x="Wind Side", y = "Length (mm)", color = "Wind Side", shape = "Wind Side") +
  theme_classic() +
  coord_cartesian(ylim = c(0,30))
xy_plot
```

# Summarizing data - two ways

lets say we want to summarize the data and need to get n, means, standard deviation, standard error

We could do

```{r}
mean(p_df$len_mm, na.rm = TRUE) # removes missing values
```

```{r}
length(p_df$len_mm)
```

-   the length counts missing and non-missing data

-   however this would get old if we had to do this for everything and then to do it for the different groupings - lee and windward...

## we need to learn to pipe things

-   the dataframe –\> pipe command that feed the dataframe into –\> next command

```{r}
p_df %>% summarize(mean_length = mean(len_mm, na.rm = TRUE))
```

## What is cool is we can do a lot of different things now

```{r}
p_df %>% 
  summarize(
    mean_length = mean(len_mm, na.rm = TRUE),
    sd_length = sd(len_mm, na.rm = TRUE),
    n_length = n())
```

## Super cool code in case there are missing values

```{r}
p_df %>% 
  summarize(
    mean_length = mean(len_mm, na.rm = TRUE),
    sd_length = sd(len_mm, na.rm = TRUE),
    n_length = sum(!is.na(len_mm)))
```

## what else do we want to know though

-   we want to know the mean and such for each group of the treatments
-   how could we do this?
    -   we need to add a command - \`group_by(wind)

    -   but how can we do this for this code?

```{r}
p_df %>% 
  summarize(
    mean_length = mean(len_mm, na.rm = TRUE),
    sd_length = sd(len_mm, na.rm = TRUE),
    n_length = sum(!is.na(len_mm)))
```

## what if we wanted to save this output

what else do we need to do to save the output

# The mean and standard error plot

One of the most common ways to present data is to show a mean and standard error plot with the means as a point and the error bars as standard error - we will talk about this next but you have all seen this...

```{r}
ggplot(p_df, aes(x = wind, y = len_mm , color = wind)) +
  stat_summary(
    fun = mean, 
    na.rm = TRUE, 
    geom = "point", 
    size = 3) +
  stat_summary(
    fun.data = mean_se, 
    na.rm = TRUE, 
    geom = "errorbar", 
    width = 0.2) +
  # annotate("rect", 
  #        xmin = -Inf, xmax = Inf,  # Cover the entire x range
  #        ymin = -Inf, ymax = Inf,  # Cover the entire y range
  #        fill = "white", 
  #        alpha = 1) +
  labs(
    x = "Wind Side",
    y = "Length (mm)",
    color = "Windy Side"
  ) +
  theme_classic()
```

## given enough time there are some other tweaks to make

in this code we can do some piping that will be very useful later on

```{r}
mean_se_plot <- p_df %>% 
  ggplot(aes(wind, len_mm , color = wind)) +
  stat_summary(
    fun = mean, 
    na.rm = TRUE, 
    geom = "point", 
    size = 3) +
  stat_summary(
    fun.data = mean_se, 
    na.rm = TRUE, 
    geom = "errorbar", 
    width = 0.2) +
  # annotate("rect", 
  #        xmin = -Inf, xmax = Inf,  # Cover the entire x range
  #        ymin = -Inf, ymax = Inf,  # Cover the entire y range
  #        fill = "white", 
  #        alpha = 1) +
  labs(
    x = "Wind Side",
    y = "Length (mm)",
    color = "Windy Side"
  ) +
  theme_classic()

mean_se_plot
```

# Using Skimr

```{r}
#| paged-print: false # will put all output here
p_df %>% skim()
```

```{r}
#| paged-print: false # will put all output here
p_df %>% 
  group_by(wind) %>% 
  skim()
```
