{
  "hash": "36f75c93db981f89bf777cf818c33720",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"06_Class_Activity\"\nauthor: \"Bill Perry\"\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  keep-md: true # retains the images when you start again\n  fig-height: 3\n  fig-width: 3\n  paged-print: false\nformat:\n  html:\n    freeze: false\n    toc: false\n    output-file: \"06_02_class_activity.html\"\n    default: true\n    embed-resources: true\n    self-contained: true\n    max-width: 80ch  # Limits line length to approximately 80 characters\n    css: ../../css/activity.css\n  docx:\n    default: true\n    toc: false\n    toc-depth: 3\n    number-sections: false\n    highlight-style: github\n    reference-doc: ../../ms_templates/custom-reference.docx\n    css: msword.css\n    embed-resources: true\n---\n\n\n\n\n\n\n# In class activity 7:\n\n## Introduction\n\nThis document demonstrates statistical analysis of lake trout mass data from Island Lake and NE 12, focusing on:\n\n1.  Testing assumptions for parametric tests\n2.  Transforming data when assumptions aren't met\n3.  Running different types of tests:\n    -   Standard t-test\n    -   Log-transformed t-test\n    -   Welch's t-test\n    -   Mann-Whitney Wilcoxon test\n    -   Permutation test\n4.  Interpreting and reporting results properly\n\n# What did we do last time in activity 6?\n\n-   **Assumptions of parametric tests**\n-   alpha and beta errors\n-   power\n-   making plots of mean and standard error\n\nLets start by ecploring onluy lake NE 12 as if you were doing a single sample T test.\\\nWe will test the assumptions and then do the a T Test on NE 12 compared to Island Lake.\n\n# **Part 1:** Single Sample T-Test\n\n::::: columns\n::: {.column width=\"60%\"}\nWe want to test if the mass of lake trout differ in NE 12 from a mean of 500g.\n\n**Activity: Define hypotheses and identify assumptions**\n\n-   H₀: μ = 500 (The mean mass of lake trout in NE12 is 500 g)\n-   H₁: μ ≠ 500 (The mean mass of lake trout in NE12 is not 500 g)\n:::\n\n::: {.column width=\"40%\"}\n## Assumptions for t-test:\n\n1.  Data is normally distributed\n2.  Observations are independent\n3.  No significant outliers\n:::\n:::::\n\n# \n\n# **Part 1:** Load Data and Test Assumptions\n\nFirst we need to load the data for all the lakes and we can look at what we have...\n\nHow may lakes are there?\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install packages if needed (uncomment if necessary)\n# install.packages(\"readr\")\n# install.packages(\"tidyverse\")\n# install.packages(\"car\")\n# install.packages(\"here\")\n\n# Load required packages\nlibrary(tidyverse)  # For data manipulation and visualization\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(car)        # For statistical tests\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: carData\n\nAttaching package: 'car'\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\nThe following object is masked from 'package:purrr':\n\n    some\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)  # For combining plots\nlibrary(perm)       # For permutation tests\n```\n:::\n\n\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the pine needle data\n# Use here() function to specify the path\n# Read in the lake trout data\nlt_df <- read_csv(\"data/lake_trout.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1502 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): sampling_site, species, lake\ndbl (2): length_mm, mass_g\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Examine the first few rows\nhead(lt_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  sampling_site species    length_mm mass_g lake \n  <chr>         <chr>          <dbl>  <dbl> <chr>\n1 I8            lake trout       515   1400 I8   \n2 I8            lake trout       468   1100 I8   \n3 I8            lake trout       527   1550 I8   \n4 I8            lake trout       525   1350 I8   \n5 I8            lake trout       517   1300 I8   \n6 I8            lake trout       607   2100 I8   \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::::\n\n# **Part 1:** Exploratory Data Analysis\n\nBefore conducting hypothesis tests, we should always explore our data to understand its characteristics.\n\nLet's calculate summary statistics and create visualizations.\n\n**Activity: Calculate basic summary statistics for lake trout mass**\n\n\n\n\n\n\n::: {.cell exercise='true'}\n\n```{.r .cell-code}\n# YOUR TASK: Calculate summary statistics for lake trout mass\n# Hint: Use summarize() function to calculate mean, sd, n, etc.\n\n# Create a summary table for all lake trout\ndf_summary <- lt_df %>%\n  # group_by(lake) %>% \n  summarize(\n    mean_length = mean(length_mm, na.rm=TRUE),\n    sd_length = sd(length_mm, na.rm=TRUE),\n    n = sum(!is.na(length_mm)),\n    se_length = sd_length / sqrt(n)\n  )\n\nprint(df_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  mean_length sd_length     n se_length\n        <dbl>     <dbl> <int>     <dbl>\n1        393.      108.  1454      2.83\n```\n\n\n:::\n\n```{.r .cell-code}\n# Now calculate summary statistics by lake\n# YOUR CODE HERE\n```\n:::\n\n\n\n\n\n\n# Create a New dataframe of lake NE12 only\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add your code here\nne12_df <- lt_df %>% \n  filter(lake == \"NE 12\") %>%\n  filter(!is.na(mass_g))  # Remove any NA values\n```\n:::\n\n\n\n\n\n\n# **Part 1:** Testing Assumptions\n\n::::: columns\n::: {.column width=\"60%\"}\nBefore conducting our t-test, we need to verify that our data meets the necessary assumptions.\n\n**Activity: Test the normality assumption**\n:::\n\n::: {.column width=\"40%\"}\nMethods to test normality:\n\n-   Visual methods:\n    -   QQ plots or histograms\n\n    -   Statistical tests: Shapiro\n\n    -   Wilk test\n:::\n:::::\n\n# **Part 1:** Visualizing the assumptions and data\n\n::::: columns\n::: {.column width=\"60%\"}\n**Activity: Create visualizations of lake trout mass**\n\nCreate a histogram and a boxplot to visualize the distribution of lake trout massvalues.\n:::\n\n::: {.column width=\"40%\"}\nEffective data visualization helps us understand:\n\n-   The central tendency\n-   The spread of the data\n-   Potential outliers\n-   Shape of distribution\n:::\n:::::\n\n# Your Task\n\n\n\n\n\n\n::: {.cell exercise='true'}\n\n```{.r .cell-code}\n# YOUR TASK: Create a histogram of lake trout mass\n# Hint: Use ggplot() and geom_histogram()\n\n# Histogram of all lake trout weights\nne12_histo_plot <- ggplot(ne12_df, aes(x = mass_g)) +\n  geom_histogram(binwidth = 200, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of LT Mass (g)\",\n       x = \"mass (g)\",\n       y = \"Frequency\") +\n  theme_minimal()\nne12_histo_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/visualize-1.png)\n:::\n\n```{.r .cell-code}\n# how can you make a dataframe only for lake NE 12 \n# and\n# make a histogram for lake NE 12 \n# Note we need the dataframe to make life a bit easier\n```\n:::\n\n\n\n\n\n\nNow to make the various plots we talk about only for lake `NE 12`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2. Dotplot\nne12_dot_plot <- ggplot(ne12_df, aes(x = mass_g, y = \"\")) +\n  geom_dotplot(binwidth = 60, stackdir = \"center\", fill = \"steelblue\", dotsize = 0.5) +\n  labs(title = \"Dotplot\", x = \"Mass (g)\", y = \"\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5), \n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank())\nne12_dot_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-2-1.png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3. Boxplot\nne12_box_plot <- ggplot(ne12_df, aes(y = mass_g)) +\n  geom_boxplot(fill = \"steelblue\") +\n  labs(title = \"Boxplot\", y = \"Mass (g)\", x = \"\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank()) +\n  coord_flip()\nne12_box_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-3-1.png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nne12_qq_plot <- ggplot(ne12_df, aes(sample = mass_g)) +\n  stat_qq(color = \"steelblue\") +\n  stat_qq_line() +\n  labs(title = \"QQ Plot\", x = \"Theoretical Quantiles\", y = \"Sample Quantiles\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\nne12_qq_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-4-1.png)\n:::\n:::\n\n\n\n\n\n\n## Use Patchwork to combine the plots\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine all plots using patchwork\ncombined_stats_plot <- (ne12_histo_plot + ne12_dot_plot) / (ne12_box_plot + ne12_qq_plot) +\n  plot_annotation(\n    title = \"Lake NE 12 Trout Mass Distribution\",\n    subtitle = paste(\"n =\", nrow(ne12_df), \"fish samples\"),\n    theme = theme(plot.title = element_text(hjust = 0.5),\n                  plot.subtitle = element_text(hjust = 0.5))\n  )\n\n# Display the combined plot\ncombined_stats_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-5-1.png)\n:::\n:::\n\n\n\n\n\n\n## Shapiro-Wilk's Test\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Shapiro-Wilk test\nshapiro_test <- shapiro.test(ne12_df$mass_g)\nprint(shapiro_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  ne12_df$mass_g\nW = 0.85148, p-value < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Now that we show how mass of lake NE 12 fails what do we do next?\n\nLets explore a comparison of NE 12 and Island Lake mass_g\n\n::: callout-tip\n## Exercise: Create a island_ne12_df dataframe from\n\nWe could also look at the difference in means... some cool code here\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a dataframe with just Island Lake and NE 12 lakes\n# Filter out any NA values for mass\nisland_ne12_df <- lt_df %>% \n  filter(lake %in% c(\"NE 12\", \"Island Lake\")) %>%\n  filter(!is.na(mass_g))  \n\n# Look at the first few rows\nhead(island_ne12_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  sampling_site species    length_mm mass_g lake       \n  <chr>         <chr>          <dbl>  <dbl> <chr>      \n1 Island Lake   lake trout       640   2600 Island Lake\n2 Island Lake   lake trout       650   2350 Island Lake\n3 Island Lake   lake trout       585   2200 Island Lake\n4 Island Lake   lake trout       720   3950 Island Lake\n5 Island Lake   lake trout       880   6800 Island Lake\n6 Island Lake   lake trout       830   3200 Island Lake\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: callout-tip\n## Get summary stats for lake trout mass in NE12 and Island lakes\n\n# Get a summary of the data by lake\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get a summary of the data by lake\nsummary_by_lake <- island_ne12_df %>%\n  group_by(lake) %>%\n  summarise(\n    n = n(),                        # Count of observations\n    mean_mass = mean(mass_g),       # Mean mass\n    sd_mass = sd(mass_g),           # Standard deviation\n    se_mass = sd_mass / sqrt(n),    # Standard error\n    min_mass = min(mass_g),         # Minimum mass\n    max_mass = max(mass_g)          # Maximum mass\n  )\n\n# View the summary\nsummary_by_lake\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 7\n  lake            n mean_mass sd_mass se_mass min_mass max_mass\n  <chr>       <int>     <dbl>   <dbl>   <dbl>    <dbl>    <dbl>\n1 Island Lake    10     3165    1617.   511.      1650     6800\n2 NE 12         322      534.    520.    29.0        9     2320\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n# Visualize data by lake\n\n::: callout-tip\n## Make a histogram of both Island and NE 12 lakes\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create histograms to visualize the distribution\nhist_plot <- island_ne12_df %>% \n  ggplot(aes(x = mass_g, fill = lake)) +\n  geom_histogram(bins = 20, alpha = 0.7) +\n  labs(title = \"Distribution of Lake Trout Mass\", \n       x = \"Mass (g)\", \n       y = \"Count\") +\n  theme_minimal() +\n  facet_wrap(~lake, scales = \"free_y\")  # Separate plots with different y-scales\n\n# Show the histogram\nhist_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-9-1.png)\n:::\n:::\n\n\n\n\n\n:::\n\n# Practice for later if you choose\n\n## Informal Normality test - often better\n\n::: callout-tip\n## Exercise: check normality\n\nAlways do a qq plot\n\nIn a QQ plot, points that follow the line indicate data that follows a normal distribution. Deviations from the line suggest non-normality.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create QQ plots for each lake to check normality\nqq_plot <- island_ne12_df %>% \n  ggplot(aes(sample = mass_g, color = lake)) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(title = \"QQ Plot for Normality Check\", \n       x = \"Theoretical Quantiles\", \n       y = \"Sample Quantiles\") +\n  theme_minimal() +\n  facet_wrap(~lake)  # Create separate plots for each lake\n\n# Show the QQ plot\nqq_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-10-1.png)\n:::\n:::\n\n\n\n\n\n:::\n\n## Formal normality test\n\n::: callout-tip\n## Exercise: do a Shapiro-Wilk Test\n\nWe can do a formal test for a p value\n\nNote island looks non normal in the qqplot but its really close with the Shapiro-Wilk test...\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Formal test for normality: Shapiro-Wilk test\n# We'll do this for each lake separately\n\n# For NE 12\nne12_data <- island_ne12_df %>% \n  filter(lake == \"NE 12\") %>%\n  pull(mass_g)\n\n# For Island Lake\nisland_data <- island_ne12_df %>% \n  filter(lake == \"Island Lake\") %>%\n  pull(mass_g)\n\n# Run Shapiro-Wilk test\nshapiro_ne12 <- shapiro.test(ne12_data)\nshapiro_island <- shapiro.test(island_data)\n\n# Show results\ncat(\"Shapiro-Wilk normality test for NE 12:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nShapiro-Wilk normality test for NE 12:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(shapiro_ne12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  ne12_data\nW = 0.85148, p-value < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nShapiro-Wilk normality test for Island Lake:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nShapiro-Wilk normality test for Island Lake:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(shapiro_island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  island_data\nW = 0.84102, p-value = 0.04538\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n## Equality of variance test - Levene's Test\n\n::: callout-tip\n## Exercise: test for equal variances\n\nAgain we want the P value not significant\n\nThe Levene's test has the following null hypothesis: - H₀: The variances are equal across groups - H₁: The variances are not equal across groups\n\nIf the p-value is less than 0.05, we reject the null hypothesis and conclude the variances are not equal.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Formal test for equal variances: Levene's test\nlevene_result <- leveneTest(mass_g ~ lake, data = island_ne12_df)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in leveneTest.default(y = y, group = group, ...): group coerced to\nfactor.\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(levene_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLevene's Test for Homogeneity of Variance (center = median)\n       Df F value    Pr(>F)    \ngroup   1  25.997 5.775e-07 ***\n      330                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n# Transformations\n\nCommonly a log10 transformation works well.\n\n::: callout-tip\n## Exercise: do a log transformation of Log 10\n\nWe could also look at the difference in means... some cool code here\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add log-transformed mass variable to our dataset\nisland_ne12_df <- island_ne12_df %>%\n  mutate(log_mass = log10(mass_g))  # Create log10 transformed mass\nhead(island_ne12_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  sampling_site species    length_mm mass_g lake        log_mass\n  <chr>         <chr>          <dbl>  <dbl> <chr>          <dbl>\n1 Island Lake   lake trout       640   2600 Island Lake     3.41\n2 Island Lake   lake trout       650   2350 Island Lake     3.37\n3 Island Lake   lake trout       585   2200 Island Lake     3.34\n4 Island Lake   lake trout       720   3950 Island Lake     3.60\n5 Island Lake   lake trout       880   6800 Island Lake     3.83\n6 Island Lake   lake trout       830   3200 Island Lake     3.51\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n## Now look at histograms of logged data\n\n::: callout-tip\n## Exercise: histogram of transformed data\n\nWe need to see if it worked\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create histograms of log-transformed data\nlog_hist_plot <- island_ne12_df %>% \n  ggplot(aes(x = log_mass, fill = lake)) +\n  geom_histogram(bins = 20, alpha = 0.7) +\n  labs(title = \"Distribution of Log-Transformed Lake Trout Mass\", \n       x = \"Log10 Mass\", \n       y = \"Count\") +\n  theme_minimal() +\n  facet_wrap(~lake, scales = \"free_y\")\n\n# Show the log-transformed histogram\nlog_hist_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-14-1.png)\n:::\n:::\n\n\n\n\n\n:::\n\n## Now a qqplot - we will skip Shapiro-Wilk this time ; )\n\n::: callout-tip\n## Exercise: do a qqplot of transformed data\n\nWe could also look at the difference in means... some cool code here\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# QQ plot for log-transformed data\nlog_qq_plot <- island_ne12_df %>% \n  ggplot(aes(sample = log_mass, color = lake)) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(title = \"QQ Plot for Log-Transformed Data\", \n       x = \"Theoretical Quantiles\", \n       y = \"Sample Quantiles\") +\n  theme_minimal() +\n  facet_wrap(~lake)\n\n# Show the log QQ plot\nlog_qq_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-15-1.png)\n:::\n:::\n\n\n\n\n\n:::\n\n::: callout-tip\n## Exercise: Shapiro-Wilk test\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check normality of log-transformed data using Shapiro-Wilk test\n# For NE 12\nlog_ne12 <- island_ne12_df %>% \n  filter(lake == \"NE 12\") %>%\n  pull(log_mass)\n\n# For Island Lake\nlog_island <- island_ne12_df %>% \n  filter(lake == \"Island Lake\") %>%\n  pull(log_mass)\n\n# Run Shapiro-Wilk test on log-transformed data\nshapiro_log_ne12 <- shapiro.test(log_ne12)\nshapiro_log_island <- shapiro.test(log_island)\n\n# Show results\ncat(\"Shapiro-Wilk normality test for log-transformed NE 12 data:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nShapiro-Wilk normality test for log-transformed NE 12 data:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(shapiro_log_ne12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  log_ne12\nW = 0.95384, p-value = 1.583e-08\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nShapiro-Wilk normality test for log-transformed Island Lake data:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nShapiro-Wilk normality test for log-transformed Island Lake data:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(shapiro_log_island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  log_island\nW = 0.93396, p-value = 0.4879\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: callout-tip\n## Exercise: Levenes test\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for equal variances in log-transformed data\nlevene_log_result <- leveneTest(log_mass ~ lake, data = island_ne12_df)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in leveneTest.default(y = y, group = group, ...): group coerced to\nfactor.\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(levene_log_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLevene's Test for Homogeneity of Variance (center = median)\n       Df F value    Pr(>F)    \ngroup   1   11.77 0.0006784 ***\n      330                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n# Transformation fails! What next\n\n## For grins lets do the Two Sample T Test anyway\n\n::: callout-tip\n## Exercise: Two sample T Test on regular data\n\nTry a t test\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a standard two-sample t-test\nt_test_result <- t.test(\n  mass_g ~ lake, \n  data = island_ne12_df,\n  var.equal = TRUE,  # Assumes equal variances\n  alternative = \"two.sided\"\n)\n\n# Show the results\nprint(t_test_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tTwo Sample t-test\n\ndata:  mass_g by lake\nt = 14.181, df = 330, p-value < 2.2e-16\nalternative hypothesis: true difference in means between group Island Lake and group NE 12 is not equal to 0\n95 percent confidence interval:\n 2266.304 2996.360\nsample estimates:\nmean in group Island Lake       mean in group NE 12 \n                3165.0000                  533.6677 \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n::: callout-tip\n## Exercise: Two sample T Test on transfomrated data\n\nTry a t test\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run a t-test on log-transformed data\nlog_t_test_result <- t.test(\n  log_mass ~ lake, \n  data = island_ne12_df,\n  var.equal = TRUE,  # Assumes equal variances\n  alternative = \"two.sided\"\n)\n\n# Show the results\nprint(log_t_test_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tTwo Sample t-test\n\ndata:  log_mass by lake\nt = 5.8192, df = 330, p-value = 1.4e-08\nalternative hypothesis: true difference in means between group Island Lake and group NE 12 is not equal to 0\n95 percent confidence interval:\n 0.6614902 1.3371216\nsample estimates:\nmean in group Island Lake       mean in group NE 12 \n                 3.457554                  2.458248 \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: callout-tip\n## Exercise: Looking at results of log10 data\n\nWhen analyzing log-transformed data:\n\n1.  The mean of log-transformed data, when back-transformed, gives the geometric mean (not the arithmetic mean)\n2.  The back-transformed confidence intervals represent the confidence interval for the geometric mean\n3.  Report results like: \"The geometric mean mass of lake trout in NE 12 was X g (95% CI: Y-Z)\"\n4.  Note you can't take the 10\\^SE to get the standard errors but rather you need to get the mean - seand the mean + se and then backtransform...\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate back-transformed means and confidence intervals\n# This converts log values back to original scale\nback_transformed <- island_ne12_df %>%\n  group_by(lake) %>%\n  summarise(\n    n = n(),\n    mean_log = mean(log_mass),\n    sd_log = sd(log_mass),\n    se_log = sd_log / sqrt(n),\n    # Back-transform mean\n    geometric_mean = 10^mean_log,\n    # Back transform SE\n     lower_se = 10^(mean_log -se_log),\n    upper_se = 10^(mean_log + se_log),\n    # Back-transform confidence intervals (approximate method)\n    lower_ci = 10^(mean_log - qt(0.975, n-1) * se_log),\n    upper_ci = 10^(mean_log + qt(0.975, n-1) * se_log)\n  )\n\n# Show back-transformed results\nprint(back_transformed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 10\n  lake        n mean_log sd_log se_log geometric_mean lower_se upper_se lower_ci\n  <chr>   <int>    <dbl>  <dbl>  <dbl>          <dbl>    <dbl>    <dbl>    <dbl>\n1 Island…    10     3.46  0.195 0.0618          2868.    2487.    3307.    2078.\n2 NE 12     322     2.46  0.541 0.0302           287.     268.     308.     251.\n# ℹ 1 more variable: upper_ci <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n## Now plot the back transformed data\n\nIn some cases the error bars are not summetrical\n\n::: callout-tip\n## Exercise:\n\nTry\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a plot showing geometric means with SE bars\ngeo_mean_plot <- back_transformed %>% \n  ggplot(aes(x = lake, y = geometric_mean, fill = lake)) +\n  # Add bars for geometric means\n  geom_bar(stat = \"identity\", width = 0.5, alpha = 0.7) +\n  # Add error bars for standard error\n  geom_errorbar(aes(ymin = lower_se, ymax = upper_se), \n                width = 0.2, linewidth = 1) +\n  # Add labels and title\n  labs(title = \"Geometric Mean Lake Trout Mass with Standard Error\",\n       subtitle = \"Back-transformed from log10 scale\",\n       x = \"Lake\",\n       y = \"Geometric Mean Mass (g)\") +\n  # Use a clean theme\n  theme_minimal() +\n  # Remove legend (since we already have lake on x-axis)\n  theme(legend.position = \"none\") \n\n# Display the plot\ngeo_mean_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-21-1.png)\n:::\n:::\n\n\n\n\n\n:::\n\n## 3. Welch's t-test\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run Welch's t-test (doesn't assume equal variances)\nwelch_test_result <- t.test(\n  mass_g ~ lake, \n  data = island_ne12_df,\n  var.equal = FALSE,  # Does NOT assume equal variances\n  alternative = \"two.sided\"\n)\n\n# Show the results\nprint(welch_test_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWelch Two Sample t-test\n\ndata:  mass_g by lake\nt = 5.1368, df = 9.0578, p-value = 0.0006016\nalternative hypothesis: true difference in means between group Island Lake and group NE 12 is not equal to 0\n95 percent confidence interval:\n 1473.676 3788.989\nsample estimates:\nmean in group Island Lake       mean in group NE 12 \n                3165.0000                  533.6677 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: callout-tip\n## When to Use Welch's t-test\n\nWelch's t-test is preferred when: - Group variances are unequal (as indicated by Levene's test) - Sample sizes are different between groups - It's more robust than the standard t-test in many situations\n:::\n\n## 4. Mann-Whitney Wilcoxon test\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run Mann-Whitney U test (non-parametric alternative to t-test)\nwilcox_test_result <- wilcox.test(\n  mass_g ~ lake, \n  data = island_ne12_df,\n  alternative = \"two.sided\"\n)\n\n# Show the results\nprint(wilcox_test_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  mass_g by lake\nW = 3205.5, p-value = 9.506e-08\nalternative hypothesis: true location shift is not equal to 0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: callout-tip\n## When to Use Mann-Whitney Wilcoxon Test\n\nThis non-parametric test is preferred when: - Data is not normally distributed (even after transformation) - Comparing medians rather than means - Data contains outliers that might affect a t-test - It compares the ranks of the values rather than the actual values\n:::\n\n## 5. Permutation test\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, let's make sure we have balanced samples\n# We'll select a random subset from NE 12 to match Island Lake size\nset.seed(123)  # For reproducibility\n\n# Get the smaller sample size\nisland_size <- sum(island_ne12_df$lake == \"Island Lake\")\n\n# Randomly sample from NE 12 to match Island Lake size\nne12_sample <- island_ne12_df %>%\n  filter(lake == \"NE 12\") %>%\n  slice_sample(n = island_size)\n\n# Combine with Island Lake data\nbalanced_df <- bind_rows(\n  ne12_sample,\n  island_ne12_df %>% filter(lake == \"Island Lake\")\n)\n\n# Extract mass data by lake\nne12_mass <- balanced_df %>%\n  filter(lake == \"NE 12\") %>%\n  pull(mass_g)\n\nisland_mass <- balanced_df %>%\n  filter(lake == \"Island Lake\") %>%\n  pull(mass_g)\n\n# Run permutation test\nperm_test_result <- permTS(\n  x = ne12_mass,\n  y = island_mass,\n  alternative = \"two.sided\",\n  method = \"exact.mc\",  # Monte Carlo method for large samples\n  control = permControl(nmc = 10000)  # Number of Monte Carlo replications\n)\n\n# Show the results\nprint(perm_test_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tExact Permutation Test Estimated by Monte Carlo\n\ndata:  ne12_mass and GROUP 2\np-value = 2e-04\nalternative hypothesis: true mean ne12_mass - mean GROUP 2 is not equal to 0\nsample estimates:\nmean ne12_mass - mean GROUP 2 \n                      -2519.9 \n\np-value estimated from 10000 Monte Carlo replications\n99 percent confidence interval on p-value:\n 0.000000000 0.001059383 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: callout-tip\n## When to Use Permutation Tests\n\nPermutation tests are useful when: - Sample sizes are small - Data doesn't meet the assumptions for parametric tests - You want a robust test that makes minimal assumptions about the data - They can test any statistic, not just means\n:::\n\n# Now lets compare all of the resutls\n\nLet's compare the results from all tests:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a summary table of test statistics and p-values\ntest_results <- data.frame(\n  Test = c(\"Standard t-test\", \n           \"Log-transformed t-test\", \n           \"Welch's t-test\", \n           \"Mann-Whitney Wilcoxon test\"),\n  Statistic = c(paste(\"t =\", round(t_test_result$statistic, 2)),\n               paste(\"t =\", round(log_t_test_result$statistic, 2)),\n               paste(\"t =\", round(welch_test_result$statistic, 2)),\n               paste(\"W =\", wilcox_test_result$statistic)),\n  p_value = c(t_test_result$p.value,\n             log_t_test_result$p.value,\n             welch_test_result$p.value,\n             wilcox_test_result$p.value),\n  Significant = c(t_test_result$p.value < 0.05,\n                 log_t_test_result$p.value < 0.05,\n                 welch_test_result$p.value < 0.05,\n                 wilcox_test_result$p.value < 0.05)\n)\n\n# Display the results\nknitr::kable(test_results, digits = 4)\n```\n\n::: {.cell-output-display}\n\n\n|Test                       |Statistic  | p_value|Significant |\n|:--------------------------|:----------|-------:|:-----------|\n|Standard t-test            |t = 14.18  |   0e+00|TRUE        |\n|Log-transformed t-test     |t = 5.82   |   0e+00|TRUE        |\n|Welch's t-test             |t = 5.14   |   6e-04|TRUE        |\n|Mann-Whitney Wilcoxon test |W = 3205.5 |   0e+00|TRUE        |\n\n\n:::\n:::\n\n\n\n\n\n\n# Visualizing Results\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a combined visualization\ncombined_plot <- island_ne12_df %>%\n  ggplot(aes(x = lake, y = mass_g, fill = lake)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Hide outliers as we'll plot points\n  geom_jitter(width = 0.2, alpha = 0.5, size = 2) +  # Add individual points\n  labs(title = \"Lake Trout Mass Comparison\",\n       subtitle = \"Comparing mass between NE 12 and Island Lake\",\n       x = \"Lake\",\n       y = \"Mass (g)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")  # Remove redundant legend\n\n# Show the plot\ncombined_plot\n```\n\n::: {.cell-output-display}\n![](07_02_class_activity_files/figure-docx/unnamed-chunk-26-1.png)\n:::\n:::\n\n\n\n\n\n\nWhen reporting results from statistical tests, include:\n\n## For Standard t-test:\n\n```         \nLake trout from NE 12 had significantly different mass (M = [mean], SD = [SD]) compared to Island Lake (M = [mean], SD = [SD]), t([df]) = [t-value], p = [p-value].\n```\n\n## For Log-transformed t-test:\n\n```         \nAfter log transformation to meet normality assumptions, lake trout from NE 12 had significantly different mass (geometric mean = [value], 95% CI [lower-upper]) compared to Island Lake (geometric mean = [value], 95% CI [lower-upper]), t([df]) = [t-value], p = [p-value].\n```\n\n## For Welch's t-test:\n\n```         \nAssuming unequal variances, lake trout from NE 12 had significantly different mass (M = [mean], SD = [SD]) compared to Island Lake (M = [mean], SD = [SD]), Welch's t([df]) = [t-value], p = [p-value].\n```\n\n## For Mann-Whitney Wilcoxon test:\n\n```         \nLake trout mass differed significantly between NE 12 (Mdn = [median]) and Island Lake (Mdn = [median]), W = [W-value], p = [p-value].\n```\n\n## For Permutation test:\n\n```         \nPermutation testing (10,000 iterations) revealed significant differences in lake trout mass between NE 12 and Island Lake, p = [p-value].\n```\n\n# Conclusion\n\nThis analysis demonstrates several approaches to comparing mass between lake trout populations. The choice of statistical test depends on whether your data meets the assumptions of parametric tests. When assumptions are violated:\n\n1.  Try transforming the data (e.g., log transformation)\n2.  Use Welch's t-test if variances are unequal\n3.  Use non-parametric tests (Mann-Whitney or permutation tests) if data remains non-normal\n\nAll methods have their strengths and limitations, and the consistency of results across methods can strengthen your conclusions.\n\n::: callout-tip\n## When to Use Each Test\n\n-   **Standard t-test**: When data is normally distributed with equal variances\n-   **Log-transformed t-test**: When raw data is skewed but log-transformation achieves normality\n-   **Welch's t-test**: When variances are unequal\n-   **Mann-Whitney Wilcoxon test**: When data is not normal and cannot be transformed to normality\n-   **Permutation test**: When sample sizes are small or assumptions cannot be met\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}