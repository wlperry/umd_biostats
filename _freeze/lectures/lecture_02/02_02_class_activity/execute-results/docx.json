{
  "hash": "4624eaa6232c3427a72163f43282d67b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02_Class_Activity\"\nauthor: \"Bill Perry\"\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  keep-md: true # retains the images when you start again\nformat:\n  html:\n    freeze: false\n    toc: false\n    output-file: \"02_02_class_activity.html\"\n    default: true\n    embed-resources: true\n    self-contained: true\n    max-width: 80ch  # Limits line length to approximately 80 characters\n    css: ../../css/activity.css\n  docx:\n    default: true\n    toc: false\n    toc-depth: 3\n    number-sections: false\n    highlight-style: github\n    reference-doc: ../../ms_templates/custom-reference.docx\n    css: msword.css\n    embed-resources: true\n---\n\n\n\n\n\n\n# In class activity 2:\n\n![](images/pine_needles.jpg){width=\"250\"}\n\n# What did we do last time?\n\n-   How to start RStudio and set up a project\n\n-   How to create a quarto markdown file\n\n-   How to add code at the start to make it work better\n\n-   How to load libraries `library(tidyverse)`\n\n-   What the `<-` is and what it does\n\n-   How to read in a file - csv and excel - `name_df <- read_csv(\"data/file.csv\")`\n\n-   How to graph data - can you read this out loud in English words\n\n    ``` r\n    ggplot(name_df, aes(x_variable, y_variable, color = categorical_variable)) +\n    #      dataframe, aesthetics(x and y variables, mapping of color or fill or shape) + \n      geom_point() +\n    # this it the geometry you want and can add more layers like\n      geom_line()\n    ```\n\n-   What questions do you have and what is unclear - what did not work so far when you started the homework?\n\n# Objectives and goals for today\n\n::::: columns\n::: {.column width=\"60%\"}\n-   Data wrangling and setting up a project\n    -   variable names - directory names - object names\n    -   can be anything you want - choose wisely young padawan\n-   How can we save the data we modify and where to save it?\n-   Why is it important to use the same names for variables?\n    -   can reuse code\n    -   clearer names and use\n-   What is the `%>%` or the `|>` - the pipe will make you happy\n-   Summarize data to a new dataframe\n-   Improve graphs\n    -   adding labels\n    -   doing summary plots\n    -   getting fancy\n-   combining or splitting dataframes - the bind_rows(1,2)\n-   Do we go wide to long and back again? We will see\n:::\n\n::: {.column width=\"40%\"}\n![](images/clipboard-2773654510.png)\n:::\n:::::\n\n# Before we start - Planning the workflow\n\n1.  What data do we have\n    1.  what is the controlled vocabulary?\n    2.  are there units?\n2.  What is the directory structure?\n3.  Do we have a metadata file?\n4.  Is the data entered in a tidy format?\n5.  What are we missing?\n\n# Now lets create a new quarto file in the system I set up\n\n::::: columns\n::: {.column width=\"60%\"}\n-   note I usually use this sort of system in an r_projects directory\n-   I have redone it for the class to organize all of the terms data\n-   you should try making some of your own projects\n:::\n\n::: {.column width=\"40%\"}\n![](images/clipboard-972859733.png){width=\"241\"}\n:::\n:::::\n\n## In RStudio:\n\n1.  click `file` - `open project` and select the `2025_UMD_BioStats_Student_Code.Rproj` file or double click on it in the finder or data explorer.\n2.  your screen will now change as RStudio knows where home is\n\n![](images/clipboard-2614364443.png)\n\n3.  Note that in the upper right you will see `2025_UMD_BioStats_Student_Code` so you know you are in the right spot\n\n4.  Now click File - New File - Quarto File\n\n![](images/clipboard-3396400631.png)\n\n5.  Create a file that starts with `02_` and then something that will help you know what is going on like `02_class_activity_in_class.qmd`\n\n6.  Now this file thinks this is home.\n\n7.  So I usually copy stuff for the header from another file as its just too hard to remember all this...\n\n``` r\n---\ntitle: \"Title of your file\" # Title of the file\nauthor: \"Your Name\" # who you are\nformat: # this is the formats that it will render to\n  html:\n    toc: false # not table of contents\n    default: true\n    embed-resources: true # makes everything go into the html file\n    self-contained: true # also makes self contained\neditor: visual # type of editing\nproject:\n  execute-dir: project # where it will look for files\nexecute:\n  keep-md: true # retains the images when you start again\n  cache: true # also heps reatain images and code\n---\n```\n\n# Now to load the libraries\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages -----\n# install.packages(\"readxl\")\n# install.packages(\"tidyverse\")\n\n# # we will install a few new libraries\n# install.packages(\"skimr\")\n```\n:::\n\n\n\n\n\n\nEach script you run from then on you will load the libraries from within the package.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the libraries ----\nlibrary(readxl) # allows to read in excel files\nlibrary(tidyverse) # provides utilities seen in console\nlibrary(skimr) # provide summary stats\nlibrary(here) # you dont need this one - just me in this html file\n```\n:::\n\n\n\n\n\n\n# Loading files\n\nNow like we did before with x and y we will do this with a spreadsheet from a CSV file or excel file\n\nWe are going to work with the same data we did in the last class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The Dataframe and variables\n\n## The whole dataframe - wont show all\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 6\n   date    group       n_s   wind  tree_no len_mm\n   <chr>   <chr>       <chr> <chr>   <dbl>  <dbl>\n 1 3/20/25 cephalopods n     lee         1     20\n 2 3/20/25 cephalopods n     lee         1     21\n 3 3/20/25 cephalopods n     lee         1     23\n 4 3/20/25 cephalopods n     lee         1     25\n 5 3/20/25 cephalopods n     lee         1     21\n 6 3/20/25 cephalopods n     lee         1     16\n 7 3/20/25 cephalopods s     wind        1     15\n 8 3/20/25 cephalopods s     wind        1     16\n 9 3/20/25 cephalopods s     wind        1     14\n10 3/20/25 cephalopods s     wind        1     17\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## The top of the datafame to see what it looks like\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(p_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  date    group       n_s   wind  tree_no len_mm\n  <chr>   <chr>       <chr> <chr>   <dbl>  <dbl>\n1 3/20/25 cephalopods n     lee         1     20\n2 3/20/25 cephalopods n     lee         1     21\n3 3/20/25 cephalopods n     lee         1     23\n4 3/20/25 cephalopods n     lee         1     25\n5 3/20/25 cephalopods n     lee         1     21\n6 3/20/25 cephalopods n     lee         1     16\n```\n\n\n:::\n\n```{.r .cell-code}\n# tail(p_df) # the bottom\n```\n:::\n\n\n\n\n\n\n## How to look at one variable\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_df$group # name of dataframe $ varaible\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"cephalopods\" \"cephalopods\" \"cephalopods\" \"cephalopods\" \"cephalopods\"\n [6] \"cephalopods\" \"cephalopods\" \"cephalopods\" \"cephalopods\" \"cephalopods\"\n[11] \"cephalopods\" \"cephalopods\" \"salmon\"      \"salmon\"      \"salmon\"     \n[16] \"salmon\"      \"salmon\"      \"salmon\"      \"salmon\"      \"salmon\"     \n[21] \"salmon\"      \"salmon\"      \"salmon\"      \"salmon\"      \"crayfish\"   \n[26] \"crayfish\"    \"crayfish\"    \"crayfish\"    \"crayfish\"    \"crayfish\"   \n[31] \"crayfish\"    \"crayfish\"    \"crayfish\"    \"crayfish\"    \"crayfish\"   \n[36] \"crayfish\"    \"snail\"       \"snail\"       \"snail\"       \"snail\"      \n[41] \"snail\"       \"snail\"       \"snail\"       \"snail\"       \"snail\"      \n[46] \"snail\"       \"snail\"       \"snail\"      \n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Plotting\n\n## XY Plot with dodged points\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  comment = '', fig.width = 4, fig.height = 3)\n\nggplot(data = p_df, aes(x=wind, y=len_mm)) + \n  geom_point(position = position_dodge2(width=0.2) )\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-8-1.png)\n:::\n\n```{.r .cell-code}\n# this dodges the points # position_dodge2 or can use position_dodge depending on grouping\n```\n:::\n\n\n\n\n\n\n## Histogram Color with Bins\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  comment = '', fig.width = 4, fig.height = 3)\n\nggplot(data = p_df, aes(x=len_mm, fill = wind)) +\n  geom_histogram( binwidth = 2, \n# sets the width in units of the bins - try different nubmers\n   position = position_dodge2(width = 0.5))\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-9-1.png)\n:::\n:::\n\n\n\n\n\n\n## Box and Whisker Plots\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  comment = '', fig.width = 4, fig.height = 3)\n\nggplot(data = p_df, aes(x=wind, y=len_mm, fill = wind)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-10-1.png)\n:::\n:::\n\n\n\n\n\n\n# How to save plots\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm)) + \n  geom_point(position = position_dodge2(width=0.2) )\nxy_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-11-1.png)\n:::\n:::\n\n\n\n\n\n\n## xy_plot is not in the environment\n\nwe can save this plot by typing\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(xy_plot, # name of the plot you called it\n       file = \"figures/xy_plot.pdf\", # type of file you want - pdf is good\n       units = \"in\", # what are the units you want to measure in\n       width = 6, height = 6) # dimensions - not if large the fonts need to be adjusted\n```\n:::\n\n\n\n\n\n\nThe file should be in the figures directory\n\n# Now lets make the graph prettier\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm, color = wind, shape = wind)) + \n  geom_point(\n    size = 2,\n    position = position_dodge2(width=0.2)) +\n  labs(x=\"Wind Side\", y = \"Length (mm)\", color = \"Wind Side\", shape = \"Wind Side\")\nxy_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-13-1.png)\n:::\n:::\n\n\n\n\n\n\n## we can also add themes\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm, color = wind, shape = wind)) + \n  geom_point(\n    size = 2,\n    position = position_dodge2(width=0.2)) +\n  labs(x=\"Wind Side\", y = \"Length (mm)\", color = \"Wind Side\", shape = \"Wind Side\") +\n  theme_classic()\nxy_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-14-1.png)\n:::\n:::\n\n\n\n\n\n\n## change the scale by zooming in\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy_plot <- ggplot(data = p_df, aes(x=wind, y=len_mm, color = wind, shape = wind)) + \n  geom_point(\n    size = 2,\n    position = position_dodge2(width=0.2)) +\n  labs(x=\"Wind Side\", y = \"Length (mm)\", color = \"Wind Side\", shape = \"Wind Side\") +\n  theme_classic() +\n  coord_cartesian(ylim = c(0,30))\nxy_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-15-1.png)\n:::\n:::\n\n\n\n\n\n\n# Summarizing data - two ways\n\nlets say we want to summarize the data and need to get n, means, standard deviation, standard error\n\nWe could do\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(p_df$len_mm, na.rm = TRUE) # removes missing values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17.66667\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(p_df$len_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   the length counts missing and non-missing data\n\n-   however this would get old if we had to do this for everything and then to do it for the different groupings - lee and windward...\n\n## we need to learn to pipe things\n\n-   the dataframe –\\> pipe command that feed the dataframe into –\\> next command\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_df %>% summarize(mean_length = mean(len_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_length\n        <dbl>\n1        17.7\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## What is cool is we can do a lot of different things now\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_df %>% \n  summarize(\n    mean_length = mean(len_mm, na.rm = TRUE),\n    sd_length = sd(len_mm, na.rm = TRUE),\n    n_length = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_length sd_length n_length\n        <dbl>     <dbl>    <int>\n1        17.7      3.53       48\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Super cool code in case there are missing values\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_df %>% \n  summarize(\n    mean_length = mean(len_mm, na.rm = TRUE),\n    sd_length = sd(len_mm, na.rm = TRUE),\n    n_length = sum(!is.na(len_mm)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_length sd_length n_length\n        <dbl>     <dbl>    <int>\n1        17.7      3.53       48\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## what else do we want to know though\n\n-   we want to know the mean and such for each group of the treatments\n-   how could we do this?\n    -   we need to add a command - \\`group_by(wind)\n\n    -   but how can we do this for this code?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_df %>% \n  summarize(\n    mean_length = mean(len_mm, na.rm = TRUE),\n    sd_length = sd(len_mm, na.rm = TRUE),\n    n_length = sum(!is.na(len_mm)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_length sd_length n_length\n        <dbl>     <dbl>    <int>\n1        17.7      3.53       48\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## what if we wanted to save this output\n\nwhat else do we need to do to save the output\n\n# The mean and standard error plot\n\nOne of the most common ways to present data is to show a mean and standard error plot with the means as a point and the error bars as standard error - we will talk about this next but you have all seen this...\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(p_df, aes(x = wind, y = len_mm , color = wind)) +\n  stat_summary(\n    fun = mean, \n    na.rm = TRUE, \n    geom = \"point\", \n    size = 3) +\n  stat_summary(\n    fun.data = mean_se, \n    na.rm = TRUE, \n    geom = \"errorbar\", \n    width = 0.2) +\n  # annotate(\"rect\", \n  #        xmin = -Inf, xmax = Inf,  # Cover the entire x range\n  #        ymin = -Inf, ymax = Inf,  # Cover the entire y range\n  #        fill = \"white\", \n  #        alpha = 1) +\n  labs(\n    x = \"Wind Side\",\n    y = \"Length (mm)\",\n    color = \"Windy Side\"\n  ) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-22-1.png)\n:::\n:::\n\n\n\n\n\n\n## given enough time there are some other tweaks to make\n\nin this code we can do some piping that will be very useful later on\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_se_plot <- p_df %>% \n  ggplot(aes(wind, len_mm , color = wind)) +\n  stat_summary(\n    fun = mean, \n    na.rm = TRUE, \n    geom = \"point\", \n    size = 3) +\n  stat_summary(\n    fun.data = mean_se, \n    na.rm = TRUE, \n    geom = \"errorbar\", \n    width = 0.2) +\n  # annotate(\"rect\", \n  #        xmin = -Inf, xmax = Inf,  # Cover the entire x range\n  #        ymin = -Inf, ymax = Inf,  # Cover the entire y range\n  #        fill = \"white\", \n  #        alpha = 1) +\n  labs(\n    x = \"Wind Side\",\n    y = \"Length (mm)\",\n    color = \"Windy Side\"\n  ) +\n  theme_classic()\n\nmean_se_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-23-1.png)\n:::\n:::\n\n\n\n\n\n\n# Using Skimr\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_df %>% skim()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |48         |\n|Number of columns        |6          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |4          |\n|numeric                  |2          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|date          |         0|             1|   7|   7|     0|        1|          0|\n|group         |         0|             1|   5|  11|     0|        4|          0|\n|n_s           |         0|             1|   1|   1|     0|        2|          0|\n|wind          |         0|             1|   3|   4|     0|        2|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|  mean|   sd| p0|   p25|  p50|   p75| p100|hist  |\n|:-------------|---------:|-------------:|-----:|----:|--:|-----:|----:|-----:|----:|:-----|\n|tree_no       |         0|             1|  2.50| 1.13|  1|  1.75|  2.5|  3.25|    4|▇▇▁▇▇ |\n|len_mm        |         0|             1| 17.67| 3.53| 12| 15.00| 17.5| 20.25|   25|▆▇▅▆▃ |\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_df %>% \n  group_by(wind) %>% \n  skim()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |48         |\n|Number of columns        |6          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |3          |\n|numeric                  |2          |\n|________________________ |           |\n|Group variables          |wind       |\n\n\n**Variable type: character**\n\n|skim_variable |wind | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|:----|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|date          |lee  |         0|             1|   7|   7|     0|        1|          0|\n|date          |wind |         0|             1|   7|   7|     0|        1|          0|\n|group         |lee  |         0|             1|   5|  11|     0|        4|          0|\n|group         |wind |         0|             1|   5|  11|     0|        4|          0|\n|n_s           |lee  |         0|             1|   1|   1|     0|        1|          0|\n|n_s           |wind |         0|             1|   1|   1|     0|        1|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable |wind | n_missing| complete_rate|  mean|   sd| p0|   p25|  p50|   p75| p100|hist  |\n|:-------------|:----|---------:|-------------:|-----:|----:|--:|-----:|----:|-----:|----:|:-----|\n|tree_no       |lee  |         0|             1|  2.50| 1.14|  1|  1.75|  2.5|  3.25|    4|▇▇▁▇▇ |\n|tree_no       |wind |         0|             1|  2.50| 1.14|  1|  1.75|  2.5|  3.25|    4|▇▇▁▇▇ |\n|len_mm        |lee  |         0|             1| 20.42| 2.45| 16| 18.75| 20.5| 21.50|   25|▂▅▇▃▂ |\n|len_mm        |wind |         0|             1| 14.92| 1.91| 12| 13.75| 15.0| 16.00|   19|▅▃▇▂▂ |\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}