{
  "hash": "ab5e826a200a3bd6c91fa6e15f1c2080",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02 Class Activity\"\nauthor: \"Bill Perry\"\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  keep-md: true # retains the images when you start again\n  fig-height: 3\n  fig-width: 3\n  paged-print: false\nformat:\n  html:\n    freeze: false\n    toc: false\n    output-file: \"02_02_class_activity.html\"\n    default: true\n    embed-resources: true\n    self-contained: true\n    max-width: 80ch  # Limits line length to approximately 80 characters\n    css: ../../css/activity.css\n  docx:\n    default: true\n    toc: false\n    toc-depth: 3\n    number-sections: false\n    highlight-style: github\n    reference-doc: ../../ms_templates/custom-reference.docx\n    css: msword.css\n    embed-resources: true\n---\n\n\n\n\n\n\n# In-class Activity 2: Data Visualization\n\n## Recap from Activity 1\n\n-   Collected pine needle samples from windward and leeward sides of trees\n-   Identified independent variable (wind exposure) and dependent variable (needle length)\n-   Measured needle lengths and recorded data\n-   Created basic visualizations\n-   Saved our data for further analysis\n\n## Today's Objectives\n\n1.  Implement data pipeline best practices\n2.  Apply controlled vocabulary and naming conventions\n3.  Create effective tables and visualizations\n4.  Customize plots for publication quality\n5.  Combine multiple plots into composite figures\n\n# Part 1: Setting Up Your Environment\n\n1.  What data do we have\n    1.  what is the controlled vocabulary?\n    2.  are there units?\n2.  What is the directory structure?\n3.  Do we have a metadata file?\n4.  Is the data entered in a tidy format?\n5.  What are we missing?\n\n# Now lets create a new quarto file \n\n::::: columns\n::: {.column width=\"60%\"}\n-   note I usually use this sort of system in an r_projects directory\n-   I have redone it for the class to organize all of the terms data\n-   you should try making some of your own projects\n:::\n\n::: {.column width=\"40%\"}\n![](images/clipboard-972859733.png){width=\"190\"}\n:::\n:::::\n\n## In RStudio:\n\n1.  click `file` - `open project` and select the `2025_UMD_BioStats_Student_Code.Rproj` file or double click on it in the finder or data explorer.\n2.  your screen will now change as RStudio knows where home is\n\n![](images/clipboard-2614364443.png){width=\"434\"}\n\n3.  Note that in the upper right you will see `2025_UMD_BioStats_Student_Code` so you know you are in the right spot\n\n4.  Now click File - New File - Quarto File\n\n![](images/clipboard-3396400631.png){width=\"414\"}\n\n5.  Create a file that starts with `02_` and then something that will help you know what is going on like `02_class_activity_in_class.qmd`\n\n6.  Now this file thinks this is home.\n\n7.  So I usually copy stuff for the header from another file as its just too hard to remember all this...\n\n``` r\n---\ntitle: \"Title of your file\" # Title of the file\nauthor: \"Your Name\" # who you are\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  keep-md: true # retains the images when you start again\n  fig-height: 3\n  fig-width: 3\n  paged-print: false\nformat:\n  html:\n    freeze: false\n    toc: false\n    output-file: \"02_02_class_activity.html\"\n    default: true\n    embed-resources: true\n    self-contained: true\n    css: ../../css/activity.css\n  docx:\n    default: true\n    toc: false\n    toc-depth: 3\n    number-sections: false\n    highlight-style: github\n    reference-doc: ../../ms_templates/custom-reference.docx\n    css: msword.css\n    embed-resources: true\n---\n```\n\n## Exercise 1: Now to load the libraries\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages -----\n# install.packages(\"readxl\")\n# install.packages(\"tidyverse\")\n\n# # we will install a few new libraries\n# install.packages(\"skimr\")\n```\n:::\n\n\n\n\n\n\nEach script you run from then on you will load the libraries from within the package.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the libraries ----\nlibrary(readxl) # allows to read in excel files\nlibrary(tidyverse) # provides utilities seen in console\nlibrary(skimr) # provide summary stats\nlibrary(janitor) # it cleans ; )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Exercise 2: Loading and Examining Data\n\nNow like we did before with x and y we will do this with a spreadsheet from a CSV file or excel file\n\nWe are going to work with the same data we did in the last class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Exercise 3: Examining Data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the pine needle data\npine_df <- read_csv(\"data/pine_needles.csv\", na = \"NA\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 48 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): date, group, n_s, wind\ndbl (2): tree_no, len_mm\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Examine the data structure\nglimpse(pine_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 48\nColumns: 6\n$ date    <chr> \"3/20/25\", \"3/20/25\", \"3/20/25\", \"3/20/25\", \"3/20/25\", \"3/20/2…\n$ group   <chr> \"cephalopods\", \"cephalopods\", \"cephalopods\", \"cephalopods\", \"c…\n$ n_s     <chr> \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"n…\n$ wind    <chr> \"lee\", \"lee\", \"lee\", \"lee\", \"lee\", \"lee\", \"wind\", \"wind\", \"win…\n$ tree_no <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ len_mm  <dbl> 20, 21, 23, 25, 21, 16, 15, 16, 14, 17, 13, 15, 19, 18, 20, 23…\n```\n\n\n:::\n\n```{.r .cell-code}\n# View the first few rows\nhead(pine_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  date    group       n_s   wind  tree_no len_mm\n  <chr>   <chr>       <chr> <chr>   <dbl>  <dbl>\n1 3/20/25 cephalopods n     lee         1     20\n2 3/20/25 cephalopods n     lee         1     21\n3 3/20/25 cephalopods n     lee         1     23\n4 3/20/25 cephalopods n     lee         1     25\n5 3/20/25 cephalopods n     lee         1     21\n6 3/20/25 cephalopods n     lee         1     16\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get a statistical summary\nsummary(pine_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     date              group               n_s                wind          \n Length:48          Length:48          Length:48          Length:48         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    tree_no         len_mm     \n Min.   :1.00   Min.   :12.00  \n 1st Qu.:1.75   1st Qu.:15.00  \n Median :2.50   Median :17.50  \n Mean   :2.50   Mean   :17.67  \n 3rd Qu.:3.25   3rd Qu.:20.25  \n Max.   :4.00   Max.   :25.00  \n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Questions to Consider:\n\n1.  What variables are in our dataset?\n2.  What are their data types?\n3.  Are there any missing values?\n4.  Do the variable names follow consistent conventions?\n5.  How might we improve the data organization?\n\n# Part 2: Basic Data Visualization\n\nLet's create some simple visualizations to explore our data:\n\n### Exercise 2: Creating a Histogram\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a basic histogram\npine_df %>%\n  ggplot(aes(x = len_mm)) +\n  geom_histogram(bins = 15) +\n  labs(title = \"Distribution of Pine Needle Lengths\",\n       x = \"Length (mm)\",\n       y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/basic-histogram-1.png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a histogram with color grouping\npine_df %>%\n  ggplot(aes(x = len_mm, fill = wind)) +\n  geom_histogram(binwidth = 2, alpha = 0.7, position = \"dodge\") +\n  labs(title = \"Distribution of Pine Needle Lengths by Wind Exposure\",\n       x = \"Length (mm)\",\n       y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-4-1.png)\n:::\n:::\n\n\n\n\n\n\n### Key Insights from Histograms:\n\nThe histogram helps us understand: - The overall distribution of needle lengths - Potential differences between windward and leeward needles - Presence of any unusual values or outliers\n\n### Exercise 3: Creating Multiple Plot Types\n\nLet's explore different ways to visualize the same data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Box plot\nbox_plot <- pine_df %>%\n  ggplot(aes(x = wind, y = len_mm, fill = wind)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot of Needle Lengths\",\n       x = \"Tree Side\",\n       y = \"Length (mm)\")\n\n# Violin plot\nviolin_plot <- pine_df %>%\n  ggplot(aes(x = wind, y = len_mm, fill = wind)) +\n  geom_violin() +\n  labs(title = \"Violin Plot of Needle Lengths\",\n       x = \"Tree Side\",\n       y = \"Length (mm)\")\n\n# Dot plot\ndot_plot <- pine_df %>%\n  ggplot(aes(x = wind, y = len_mm, color = wind)) +\n  geom_jitter(width = 0.2, alpha = 0.7) +\n  labs(title = \"Dot Plot of Needle Lengths\",\n       x = \"Tree Side\",\n       y = \"Length (mm)\")\n\n# Display all plots using patchwork\nbox_plot | violin_plot | dot_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/multiple-plot-types-1.png)\n:::\n:::\n\n\n\n\n\n\n### Questions to Consider:\n\n1.  Which plot type best reveals patterns in our data?\n2.  What are the advantages and disadvantages of each plot type?\n3.  How might we combine elements from different plot types?\n\n## Part 3: Building Complex Visualizations Layer by Layer\n\nNow let's build more sophisticated visualizations by adding layers one at a time:\n\n### Exercise 4: Building a Layered Plot\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start with a basic plot\np1 <- pine_df %>%\n  ggplot(aes(x = wind, y = len_mm, fill = wind)) +\n  labs(title = \"Layer 1: Basic Plot Setup\",\n       x = \"Tree Side\", \n       y = \"Length (mm)\")\n\n# Add boxplot layer\np2 <- p1 +\n  geom_boxplot(alpha = 0.7) +\n  labs(title = \"Layer 2: Adding Boxplot\")\n\n# Add individual data points\np3 <- p2 +\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"gray30\") +\n  labs(title = \"Layer 3: Adding Data Points\")\n\n# Add mean indicators\np4 <- p3 +\n  stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3, fill = \"white\") +\n  labs(title = \"Layer 4: Adding Mean Indicators\")\n\n# Create a 2x2 grid of the progressive plot building\n(p1 | p2) / (p3 | p4)\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/layered-plot-1.png)\n:::\n:::\n\n\n\n\n\n\n### Discussion Points:\n\n-   How does each layer contribute to the story our data is telling?\n-   Why might we want to show individual data points alongside summary statistics?\n-   How does transparency (alpha) help when overlaying multiple elements?\n\n## Part 4: Customizing Plots for Publication\n\n### Exercise 5: Adding customization\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a fully customized plot\ncolor_plot <- pine_df %>%\n  ggplot(aes(x = wind, y = len_mm, fill = wind)) +\n  # Add violin plots for distribution\n  geom_violin(alpha = 0.4) +\n  # Add boxplots for key statistics\n  geom_boxplot(width = 0.2, alpha = 0.7, outlier.shape = NA) +\n  # Add individual data points\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"gray30\", size = 2) +\n  # Add mean points\n  labs(\n    title = \"Pine Needle Length Varies with Wind Exposure\",\n    subtitle = \"Needles on the leeward side tend to be longer\",\n    x = \"Tree Side\", \n    y = \"Needle Length (mm)\",\n    caption = \"Data collected Spring 2023\"\n  ) +\n  # Customize colors with a colorblind-friendly palette\n  scale_fill_manual(\n    values = c(\n      \"wind\" = \"#1b9e77\",\n       \"lee\" = \"#d95f02\"\n      ),\n    labels = c(\n      \"wind\" = \"Windward\", \n      \"lee\" = \"Leeward\"\n      )) +\n  # Apply a clean theme\n  theme_minimal() \n\n\n# Display the publication-ready plot\ncolor_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/unnamed-chunk-5-1.png)\n:::\n:::\n\n\n\n\n\n\nLet's create a publication-quality figure by customizing colors, labels, and themes:\n\n### Exercise 6: Creating a Publication-Ready Plot\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a fully customized plot\npublication_plot <- pine_df %>%\n  ggplot(aes(x = wind, y = len_mm, fill = wind)) +\n  # Add violin plots for distribution\n  geom_violin(alpha = 0.4) +\n  # Add boxplots for key statistics\n  geom_boxplot(width = 0.2, alpha = 0.7, outlier.shape = NA) +\n  # Add individual data points\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"gray30\", size = 2) +\n  # Add mean points\n  stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3, fill = \"white\") +\n  # Add informative labels\n  labs(\n    title = \"Pine Needle Length Varies with Wind Exposure\",\n    subtitle = \"Needles on the leeward side tend to be longer\",\n    x = \"Tree Side\", \n    y = \"Needle Length (mm)\",\n    caption = \"Data collected Spring 2023\"\n  ) +\n  # Customize colors with a colorblind-friendly palette\n  scale_fill_manual(\n    values = c(\"wind\" = \"#1b9e77\", \"lee\" = \"#d95f02\"),\n    labels = c(\"wind\" = \"Windward\", \"lee\" = \"Leeward\")\n  ) +\n  # Apply a clean theme\n  theme_classic() \n  \n\n# Display the publication-ready plot\npublication_plot\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/publication-plot-1.png)\n:::\n:::\n\n\n\n\n\n\n### Customization Elements:\n\n1.  **Plot Elements**:\n    -   Violin plots to show distribution\n    -   Boxplots to show quartiles and median\n    -   Individual points for transparency\n    -   Mean indicators for central tendency\n2.  **Visual Design**:\n    -   Colorblind-friendly color palette\n    -   Thoughtful use of transparency\n    -   Clear, informative title and subtitle\n    -   Professional typography and spacing\n3.  **Accessibility Considerations**:\n    -   Sufficient contrast\n    -   Redundant encoding (position and color)\n    -   Clear labels with units\n\n## Part 5: Creating Complex Multi-Panel Figures\n\nFinally, let's create a publication-ready multi-panel figure:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_plot +\n  \n  publication_plot   + \n  plot_layout(ncol = 2) + \n  plot_annotation(tag_levels = \"A\", tag_suffix = \")\")\n```\n\n::: {.cell-output-display}\n![](02_02_class_activity_files/figure-docx/multi-panel-1.png)\n:::\n:::\n\n\n\n\n\n\n``` r\n# we can add this to remove things\n# why do this?\n# + theme(\n#     axis.text.y = element_blank(),  # Removes x-axis labels\n#     axis.title.y = element_blank()  # Removes x-axis title\n```\n\n## Summary and Key Takeaways\n\nIn this activity, we've learned how to:\n\n1.  **Load and examine data** properly\n2.  **Create basic visualizations** to explore patterns\n3.  **Build complex plots layer by layer** using ggplot2's grammar\n4.  **Customize plots** for clear communication and visual appeal\n5.  **Add statistical information** to support data interpretation\n6.  **Combine multiple plots** into publication-ready figures\n\n### Best Practices for Data Visualization:\n\n1.  **Start simple**, then add complexity as needed\n2.  **Focus on the story** your data is telling\n3.  **Use appropriate plot types** for your data structure\n4.  **Minimize chart junk** and maximize data-ink ratio\n5.  **Create clear, informative labels**\n6.  **Use color purposefully** and with accessibility in mind\n7.  **Include both individual data points and summary statistics** when possible\n8.  **Consider your audience** when designing visualizations\n\n## \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}